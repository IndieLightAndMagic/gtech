#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

#define NR_POINT_LIGHTS 4

struct FragmentShaderInput{

	vec3 aVertex;
	vec3 aNormal;
	vec2 aTextureCoordinate;
};
in FragmentShaderInput fsi;

// texture samplers
uniform sampler2D texture1;
uniform sampler2D texture2;

// a color selector
uniform vec3 diffuseColor;



void main()
{
	// linearly interpolate between both textures (80% container, 20% awesomeface)
	// FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);
	// FragColor = vec4(0.8,0.1,0.4,1.0);
	FragColor = vec4(diffuseColor,1.0);

}